class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        int n=nums.size();
        mergeSort(nums, 0, n-1);
        return nums;
    }
private:
    void outPlaceMerge(vector<int> &nums, int low, int mid, int high) {
	    if (low >= high) return;
	    int l = low, r = mid + 1, k = 0, size = high - low + 1;
	    vector<int> sorted(size, 0);
	    while (l <= mid and r <= high)
		    sorted[k++] = nums[l] < nums[r] ? nums[l++] : nums[r++];
	    while (l <= mid) 
		    sorted[k++] = nums[l++];
	    while (r <= high) 
		    sorted[k++] = nums[r++];
	    for (k = 0; k < size; k++)
	    	nums[k + low] = sorted[k];
    }

    void mergeSort(vector<int> &nums, int low, int high) {
	    if (low >= high) return;
	    int mid = (high - low) / 2 + low;
	    mergeSort(nums, low, mid);
	    mergeSort(nums, mid + 1, high);
	    outPlaceMerge(nums, low, mid, high);
    }
    int partition(vector<int>& nums, int si, int ei){
        int pivot=nums[si];
        int count=0;
        for(int i=si+1;i<=ei;i++){
            if(nums[i]<pivot)count++;
        }
        swap(nums[si], nums[si+count]);
        int pivotIndex=si+count;
        int i=si,j=ei;
        while(i<pivotIndex && j>pivotIndex){
            if(nums[i]<pivot)i++;
            else if(nums[j]>=pivot)j--;
            else{
                swap(nums[i], nums[j]);
            }
        }
        return pivotIndex;
    }
    void quicksort(vector<int>& nums, int si, int ei){
        if(si>=ei)return;
        int pivot=partition(nums, si, ei);
        quicksort(nums, si, pivot-1);
        quicksort(nums, pivot+1, ei);
    }
};
