/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//  struct prop{
//     int data;
//     bool l;
//     bool r;
//  };
// class Solution {
// public:
//     void preorder(TreeNode* root, vector<prop>& subtree){
//         if(root==NULL)return {};
//         prop* curr=new prop();
//         curr->data=root->val;
//         if(!root->right)curr->r=false;
//         else
//             curr->r=true;
//         if(!root->left)curr->l=false;
//         else
//             curr->l=true;
//         subtree.push_back(curr);
//         preorder(root->left);
//         preorder(root->right);
//     }
//     vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
//         vector<prop> trav;
//         preorder(root, trav);
//         for(int i=0;i<trav.size();i++){
//             for(int j=i+1;j<trav.size();j++){
//                 if(trav[i]==trav[j]){
//                     int subtree1=i;
//                     int subtree2=j;
//                     vector<TreeNode*> subtree;
//                     subtree
//                     while()
//                 }
//             }
//         }
//     }
// };
class Solution {
public:
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        unordered_map<string, vector<TreeNode*>> map;
        vector<TreeNode*> dups;
        serialize(root, map);
        for (auto it = map.begin(); it != map.end(); it++)
            if (it->second.size() > 1) dups.push_back(it->second[0]);
        return dups;
    }
private:
    string serialize(TreeNode* node, unordered_map<string, vector<TreeNode*>>& map) {
        if (!node) return "";
        string s = "(" + serialize(node->left, map) + to_string(node->val) + serialize(node->right, map) + ")";
        map[s].push_back(node);
        return s;
    }
};
