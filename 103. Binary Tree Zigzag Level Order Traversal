/* optimized
class Solution {
public:
    vector<vector<int> > zigzagLevelOrder(TreeNode* root) {
    if (root == NULL) {
        return vector<vector<int> > ();
    }
    vector<vector<int> > result;

    queue<TreeNode*> nodesQueue;
    nodesQueue.push(root);
    bool leftToRight = true;

    while ( !nodesQueue.empty()) {
        int size = nodesQueue.size();
        vector<int> row(size);
        for (int i = 0; i < size; i++) {
            TreeNode* node = nodesQueue.front();
            nodesQueue.pop();

            // find position to fill node's value
            int index = (leftToRight) ? i : (size - 1 - i);

            row[index] = node->val;
            if (node->left) {
                nodesQueue.push(node->left);
            }
            if (node->right) {
                nodesQueue.push(node->right);
            }
        }
        // after this level
        leftToRight = !leftToRight;
        result.push_back(row);
    }
    return result;
}
};
*/
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        if(!root)return ans;
        int cheight=0;
        queue<pair<int, TreeNode*>> q;  //height, curr_root
        q.push({cheight, root});
        while(!q.empty()){
            pair<int, TreeNode*> curr=q.front();
            TreeNode* curr_node=curr.second;
            int curr_height=curr.first;
            if(ans.size()==curr_height){
                vector<int> ctrav;
                ctrav.push_back(curr_node->val);
                ans.push_back({{curr_node->val}});
            }else{
                ans[ans.size()-1].push_back(curr_node->val);
            }
            if(curr_node->left){
                q.push({curr_height+1, curr_node->left});
            }
            if(curr_node->right){
                q.push({curr_height+1, curr_node->right});
            }
            q.pop();
        }
        for(int i=1;i<ans.size();i++){
            if(i%2!=0)reverse(ans[i].begin(), ans[i].end());
        }
        return ans;
    }
};
