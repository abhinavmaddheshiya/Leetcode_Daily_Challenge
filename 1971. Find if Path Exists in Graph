class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        unordered_map<int, vector<int>> um;
        for(int i=0;i<edges.size();i++){
            int a=edges[i][0];
            int b=edges[i][1];
            um[a].push_back(b);
            um[b].push_back(a);
        }
        queue<int> q;
        q.push(source);
        bool *visited=new bool[n];
        for(int i=0;i<n;i++){
            visited[i]=false;
        }
        visited[source]=true;
        while(!q.empty()){
            int now=q.front();
            for(int i=0;i<um[now].size();i++){
                if(!visited[um[now][i]]){
                    q.push(um[now][i]);
                    visited[um[now][i]]=true;
                }
            }
            q.pop();
            if(now==destination){
                break;
            }
        }
        return visited[destination]? true:false;
    }
};
