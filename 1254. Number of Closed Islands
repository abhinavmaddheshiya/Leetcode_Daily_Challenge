class Solution {
public:
    int closedIsland(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<bool>> visited(n, vector<bool>(m, false));
        int count=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1)continue;
                if(!visited[i][j])count+=dfs(i, j, n, m, visited, grid);
            }
        }
        return count;
    }
private:
    int dfs(int row, int col, int n, int m, vector<vector<bool>>& visited, vector<vector<int>>& grid) {
        if(row<0 || col<0 || row==n || col==m)return 0;
        if(grid[row][col]==1 || visited[row][col])return 1;
        visited[row][col]=true;
        return min(min(dfs(row, col-1, n, m, visited, grid),
        dfs(row, col+1, n, m, visited, grid)),
        min(dfs(row-1, col, n, m, visited, grid),
        dfs(row+1, col, n, m, visited, grid)));
    }
};
