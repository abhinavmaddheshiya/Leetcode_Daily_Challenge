class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n = nums.size(), subSize=0, idx=0;
        vector<int> dp(n, 1), hash(n, 0);
        vector<int> res;
        for(int ind=1;ind<n;ind++){
            hash[ind] = ind;
            for(int prevInd=0;prevInd<ind;prevInd++){
                int prev = nums[prevInd], curr = nums[ind];
                if(curr%prev == 0){
                    if(1+dp[prevInd] > dp[ind]){
                        dp[ind] = 1+dp[prevInd];
                        hash[ind] = prevInd;
                    }
                    if(dp[ind]>subSize){
                        subSize = dp[ind];
                        idx = ind;
                    }
                }
            }
        }
        while(hash[idx]!=idx){
            res.push_back(nums[idx]);
            idx = hash[idx];
        }
        res.push_back(nums[idx]);
        return res;
    }
};
